/*
 * This file is generated by jOOQ.
 */
package eu.catalkaya.pokertracker.database.tables;


import eu.catalkaya.pokertracker.database.DefaultSchema;
import eu.catalkaya.pokertracker.database.Keys;
import eu.catalkaya.pokertracker.database.tables.records.LoginRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Login extends TableImpl<LoginRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOGIN</code>
     */
    public static final Login LOGIN = new Login();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoginRecord> getRecordType() {
        return LoginRecord.class;
    }

    /**
     * The column <code>LOGIN.ID</code>.
     */
    public final TableField<LoginRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>LOGIN.USERNAME</code>.
     */
    public final TableField<LoginRecord, String> USERNAME = createField(DSL.name("USERNAME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LOGIN.PASSWORD</code>.
     */
    public final TableField<LoginRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LOGIN.ROLE</code>.
     */
    public final TableField<LoginRecord, String> ROLE = createField(DSL.name("ROLE"), SQLDataType.CLOB.nullable(false), this, "");

    private Login(Name alias, Table<LoginRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Login(Name alias, Table<LoginRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>LOGIN</code> table reference
     */
    public Login(String alias) {
        this(DSL.name(alias), LOGIN);
    }

    /**
     * Create an aliased <code>LOGIN</code> table reference
     */
    public Login(Name alias) {
        this(alias, LOGIN);
    }

    /**
     * Create a <code>LOGIN</code> table reference
     */
    public Login() {
        this(DSL.name("LOGIN"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<LoginRecord, Integer> getIdentity() {
        return (Identity<LoginRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LoginRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public Login as(String alias) {
        return new Login(DSL.name(alias), this);
    }

    @Override
    public Login as(Name alias) {
        return new Login(alias, this);
    }

    @Override
    public Login as(Table<?> alias) {
        return new Login(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Login rename(String name) {
        return new Login(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Login rename(Name name) {
        return new Login(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Login rename(Table<?> name) {
        return new Login(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login where(Condition condition) {
        return new Login(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Login where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Login where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Login where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Login where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
